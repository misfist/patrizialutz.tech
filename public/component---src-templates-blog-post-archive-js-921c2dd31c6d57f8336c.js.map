{"version":3,"sources":["webpack:///./src/components/profile.js","webpack:///./src/components/experience.js","webpack:///./src/components/expertise.js","webpack:///./src/components/projects.js","webpack:///./src/components/contact.js","webpack:///./src/templates/blog-post-archive.js"],"names":["Profile","data","useStaticQuery","id","className","parse","wpPage","title","content","JSON","stringify","Experience","posts","allWpPortfolio","nodes","length","map","post","clients","acf","key","slug","href","url","target","rel","company","location","startDate","endDate","client","index","clientUrl","clientName","Expertise","Projects","featuredImage","node","itemScope","itemType","src","sourceUrl","alt","srcSet","sizes","loading","submitForm","document","querySelector","formData","FormData","append","xhr","XMLHttpRequest","addEventListener","this","readyState","DONE","console","log","responseText","open","setRequestHeader","btoa","send","Contact","useEffect","submit","fieldEls","querySelectorAll","Array","from","field","removeAttribute","event","preventDefault","BlogIndex","pageContext","nextPagePath","previousPagePath","isHomePage","uri","to","itemProp","date","excerpt"],"mappings":"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","file":"component---src-templates-blog-post-archive-js-921c2dd31c6d57f8336c.js","sourcesContent":["/**\n * Profile component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nconst Profile = () => {\n  const data = useStaticQuery(graphql`\n  {\n    wpPage(slug: {eq: \"home\"}) {\n      title\n      content\n    }\n  }\n  `)\n  return (\n    <section id=\"profile\" className=\"section section__profile\">\n      <h2 className=\"section-title\">{ parse( data.wpPage.title ) }</h2>\n      <div className=\"section-content\">{ parse( data.wpPage.content ) }</div>\n      <pre>{JSON.stringify(data, null, 4)}</pre>\n    </section>\n  )\n}\n\nexport default Profile","/**\n * Exerience component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\nimport React from \"react\"\nimport { graphql, useStaticQuery } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nconst Experience = () => {\n  const data = useStaticQuery(\n    graphql`\n    {\n      allWpPortfolio(sort: {order: DESC, fields: date}, filter: {portfolioTypes: {nodes: {elemMatch: {slug: {eq: \"job\"}}}}}) {\n        nodes {\n          acf {\n            clients {\n              clientName\n              clientUrl\n            }\n            company\n            endDate\n            fieldGroupName\n            url\n            location\n            startDate\n          }\n          slug\n          content\n          title\n          location\n        }\n      }\n    }\n    `\n  )\n  \n  const posts = data.allWpPortfolio.nodes\n\n  if( !posts.length ) {\n    return (\n      <section id=\"experience\" className=\"section section__experience\">\n        <h2 className=\"section-title\">Experience</h2>\n        <div className=\"section-content\">\n          Nothing here to see.\n        </div>\n      </section>\n    )\n  }\n\n  return (\n    <section id=\"experience\" className=\"section section__experience\">\n      <h2 className=\"section-title\">Experience</h2>\n      <div className=\"section-content\">\n        <div className=\"post-list post-list__experience\">\n\n          {posts.map( post => {\n\n            let clients = post.acf.clients\n            // let start = post.acf.startDate ? new date( post.acf.startDate ) : ''\n\n            // const clientBlock = () => {\n            //   if( clients && clients.length ) {\n            //     <div>We have clients</div>\n            //   }\n            // }\n\n            return (\n              <article\n                key={post.slug}\n                id={post.slug}\n                className=\"\"\n              >\n                <header className=\"entry-header\">\n                  <h4 className=\"job-company\">\n                    <i className=\"fas fa-external-link-alt\"></i>\n                    <a\n                      href={post.url}\n                      target=\"_blank\"\n                      title={post.title}\n                      rel=\"noreferrer\"\n                    >\n                      {post.company}\n                    </a>\n                  </h4>\n                  <div className=\"job-location\">{post.location}</div>\n                  <div className=\"job-dates\">\n                    <time className=\"start-date\">{post.acf.startDate}</time> to\n                    <time className=\"end-date\">{post.acf.endDate ? post.acf.endDate : 'Present'}</time>\n                  </div>\n                </header>\n\n                <div className=\"entry-content\">\n                  <h5 className=\"job-title\">{post.title}</h5>\n                  <div className=\"job-description\">{parse(post.content)}</div>\n\n                  {clients && (\n                    <div className=\"clients-list\">\n                      <strong>Clients</strong>\n\n                      <ul>\n                        {clients.map( (client, index) => {\n                          return (\n                            <li \n                              className=\"list-inline-item\"\n                              key={'client-' + index}\n                            >\n                              <a\n                                href={client.clientUrl}\n                                title={parse(client.clientName)}\n                                rel=\"noreferrer\"\n                                target=\"_blank\"\n                              >\n                                {parse(client.clientName)}\n                              </a>\n                            </li>\n                          )\n                        })}\n                      </ul>\n                    </div>\n                  )}\n                </div>\n\n                <footer className=\"entry-footer\"></footer>\n              </article>\n            )\n          } )}\n\n        </div>\n      </div>\n      <pre>{JSON.stringify(posts, null, 4)}</pre>\n    </section>\n  )\n}\n\nexport default Experience\n\n","/**\n * Expertise component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nconst Expertise = () => {\n  const data = useStaticQuery(graphql`\n    {\n      wpPage(slug: {eq: \"expertise\"}) {\n        acf {\n          skillsGroup {\n            section\n            skills {\n              skill\n            }\n          }\n        }\n        title,\n        content\n      }\n    }\n  `)\n\n  return (\n    <section id=\"expertise\" className=\"section section__expertise\">\n      <h2 className=\"section-title\">{ parse( data.wpPage.title ) }</h2>\n      <div className=\"section-content\"></div>\n      <pre>{JSON.stringify(data, null, 4)}</pre>\n    </section>\n  )\n}\n\nexport default Expertise\n\n","/**\n * Projects component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nconst Projects = () => {\n  const data = useStaticQuery(graphql`\n  {\n    allWpPortfolio(filter: {portfolioTypes: {nodes: {elemMatch: {slug: {eq: \"project\"}}}}}, limit: 8, sort: {fields: menuOrder, order: ASC}) {\n      nodes {\n        title\n        content\n        link\n        slug\n        featuredImage {\n          node {\n            title\n            srcSet\n            sourceUrl\n            sizes\n            mediaDetails {\n              height\n              width\n            }\n          }\n        }\n        acf {\n          company\n          url\n        }\n      }\n    }\n  }\n  `)\n  const posts = data.allWpPortfolio.nodes\n\n  if( !posts.length ) {\n    return (\n      <section id=\"projects\" className=\"section section__projects\">\n        <h2 className=\"section-title\">Recent Projects</h2>\n        <div className=\"section-content\">\n          Nothing here to see.\n        </div>\n      </section>\n    )\n  }\n\n  return (\n    <section id=\"projects\" className=\"section section__projects\">\n      <h2 className=\"section-title\">Recent Projects</h2>\n      <div className=\"section-content\">\n        <div className=\"post-list post-list__projects\">\n          {posts.map(post => {\n            const featuredImage = post.featuredImage.node\n\n            return (\n              <article\n                key={post.slug}\n                id={post.slug}\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <div className=\"hovereffect\">\n                  <img\n                    src={featuredImage.sourceUrl}\n                    className=\"img-responsive responsive--full wp-post-image\"\n                    alt=\"\"\n                    srcSet={featuredImage.srcSet}\n                    sizes={featuredImage.sizes}\n                    loading=\"lazy\"\n                    title={post.title}\n                  />\n                  <div className=\"overlay\">\n                    <h3 className=\"entry-title\"><a href={post.acf.url} title={parse(post.title)} rel=\"noreferrer\" target=\"_blank\">{parse(post.title)}<span className=\"fas fa-external-link-alt\"></span></a></h3>\n                    <div className=\"entry-content\">{ parse(post.content) }</div>\n                  </div>\n                </div>\n              </article>\n            )\n          })}\n        </div>\n      </div>\n      <pre>{JSON.stringify(posts, null, 4)}</pre>\n    </section>\n  )\n}\n\nexport default Projects\n","/**\n * Contat component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\nimport React, { useState, useEffect } from 'react';\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n// import { jQuery as $ } from 'jquery'\n// import axios from \"axios\"\n\nconst Contact = () => {\n  const data = useStaticQuery(graphql`\n  {\n    wpPage(slug: {eq: \"contact\"}) {\n      title\n      content\n    }\n  }\n  `)\n\n  useEffect(() => {\n    console.log( 'useEffect' )\n\n    const wpcf7El = document.querySelector( '.wpcf7-form' );\n    const submit = wpcf7El.querySelector( 'input.wpcf7-submit' );\n    const fieldEls = document.querySelectorAll( '.wpcf7-form-control' );\n    const fields = Array.from( fieldEls );\n\n    fields.map( field => {\n      field.removeAttribute( 'value' );\n    } );\n \n    submit.addEventListener( 'click', function( event ) {\n      event.preventDefault();\n      submitForm();\n    }, false );\n  })\n\n  // if ( typeof document !== 'undefined' ) {\n  //   const wpcf7El = document.querySelector( '.wpcf7-form' );\n  //   const submit = wpcf7El.querySelector( 'input.wpcf7-submit' );\n \n  //   // console.log( dotenv );\n  //   if( typeof submit !== 'undefined' ) {\n  //     submit.addEventListener( 'click', function( event ) {\n  //       event.preventDefault();\n  //       submitForm();\n  //     }, false );\n  //   }\n\n  // }\n  return (\n    <section id=\"contact\" className=\"section section__contact\">\n      <h2 className=\"section-title\">{ parse( data.wpPage.title ) }</h2>\n      <div className=\"section-content\">{ parse( data.wpPage.content ) }</div>\n      <pre>{JSON.stringify(data, null, 4)}</pre>\n    </section>\n  )\n}\n\nconst submitForm = () => {\n  const wpcf7El = document.querySelector( '.wpcf7-form' );\n\n  const formData = new FormData();\n  formData.append(\"sender-name\", \"Pea\");\n  formData.append(\"[sender-name]\", \"Pea\");\n  formData.append(\"sender-email\", \"pea@misfist.com\");\n  formData.append(\"sender-subject\", \"Testing\");\n  formData.append(\"sender-message\", \"Will this thing ever work?\");\n\n  // fetch(\"https://editor.patrizialutz.tech/wp-json/contact-form-7/v1/contact-forms/983/feedback/\", {\n  //   \"method\": \"POST\",\n  //   \"headers\": {\n  //     \"Content-Type\": \"multipart/form-data\",\n  //     // \"Content-Type\": \"application/json\",\n  //     \"Authorization\": \"Basic \" + btoa( 'api_user' + ':' + '9GIc Ux2Z yELL 7vZC GlJ5 zOfa' ),\n  //   },\n  //   \"body\": { 'sender-name': 'Pea' }\n  // })\n  // .then(response => {\n  //   console.log(response);\n  // })\n  // .catch(err => {\n  //   console.error(err);\n  // });\n \n  const xhr = new XMLHttpRequest();\n  // xhr.withCredentials = true;\n\n  xhr.addEventListener( \"readystatechange\", function () {\n    if ( this.readyState === this.DONE ) {\n      console.log( this.responseText );\n    }\n  });\n\n  // // Define what happens on successful data submission\n  // xhr.addEventListener( 'load', function( event ) {\n  //   console.log( event );\n  //   console.log( xhr.response );\n  // } );\n\n  // // Define what happens in case of error\n  // xhr.addEventListener( 'error', function( event ) {\n  //   console.error( 'Oops! Something went wrong.' );\n  //   console.error( event );\n  // } );\n\n  xhr.open( \"POST\", `https://editor.patrizialutz.tech/wp-json/contact-form-7/v1/contact-forms/983/feedback/` );\n  xhr.setRequestHeader( \"Content-Type\", \"multipart/form-data\" );\n  xhr.setRequestHeader( \"Authorization\", \"Basic \" + btoa( 'api_user' + ':' + '9GIc Ux2Z yELL 7vZC GlJ5 zOfa' ) );\n\n  xhr.send( formData );\n\n  // formData.append(\"sender-name\", \"Pea-from site\");\n  // formData.append(\"sender-email\", \"pea@misfist.com\");\n  // formData.append(\"sender-subject\", \"Testing from site\");\n  // formData.append(\"sender-message\", \"Will this thing ever work when I send from Gatsby site?\");\n\n  // fetch( `https://editor.patrizialutz.tech/json/contact-form-7/v1/contact-forms/983/feedback/`, {\n  //   \"method\": \"POST\",\n  //   \"headers\": {\n  //     \"authorization\": \"Basic \" + btoa( `${process.env.APPLICATION_PASSWORD_USER}:${process.env.APPLICATION_PASSWORD_KEY}` ),\n  //     \"content-type\": 'multipart/form-data',\n  //     \"crossorigin\": 'credentials'\n  //   },\n  //   \"body\": formData\n  // })\n  // .then(response => {\n  //   console.log( response );\n  // })\n  // .catch(error => {\n  //   console.error( error );\n  // });\n\n}\n\nexport default Contact","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport parse from \"html-react-parser\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Profile from \"../components/profile\"\nimport Experience from \"../components/experience\"\nimport Expertise from \"../components/expertise\"\nimport Projects from \"../components/projects\"\nimport Contact from \"../components/contact\"\n\nconst BlogIndex = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath },\n}) => {\n  const posts = data.allWpPortfolio.nodes\n\n  if (!posts.length) {\n    return (\n      <Layout isHomePage>\n        <SEO title=\"All projects\" />\n        <Bio />\n        <p>\n          No portfolios found. Add posts to your WordPress site and they'll\n          appear here!\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout isHomePage>\n      <SEO title=\"All projects\" />\n\n      <Profile />\n\n      <Experience />\n\n      <Expertise />\n\n      <Projects />\n\n      <Contact />\n\n      <div>\n        {posts.map(post => {\n          const title = post.title\n\n          return (\n              <article\n                key={post.uri}\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.uri} itemProp=\"url\">\n                      <span itemProp=\"headline\">{parse(title)}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.date}</small>\n                </header>\n                <section itemProp=\"description\">{parse(post.excerpt)}</section>\n              </article>\n          )\n        })}\n      </div>\n\n      {previousPagePath && (\n        <>\n          <Link to={previousPagePath}>Previous page</Link>\n          <br />\n        </>\n      )}\n      {nextPagePath && <Link to={nextPagePath}>Next page</Link>}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query WordPressPostArchive($offset: Int!, $postsPerPage: Int!) {\n    allWpPortfolio(\n      sort: { fields: [date], order: DESC }\n      limit: $postsPerPage\n      skip: $offset\n    ) {\n      nodes {\n        excerpt\n        uri\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        excerpt\n        featuredImage {\n          node {\n              id\n              srcSet\n              sourceUrl\n              title\n              }\n          }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}